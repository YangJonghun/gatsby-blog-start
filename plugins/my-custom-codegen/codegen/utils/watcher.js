"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.createWatcher = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _path = require("path");

var _pluginHelpers = require("@graphql-codegen/plugin-helpers");

var _isValidPath = _interopRequireDefault(require("is-valid-path"));

var _isGlob = _interopRequireDefault(require("is-glob"));

var _debounce = _interopRequireDefault(require("debounce"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _debugging = require("./debugging");

var _logger = require("./logger");

var _codegen = require("../codegen");

var _hooks = require("../hooks");

var _config = require("../config");

function log(msg) {
  // double spaces to inline the message with Listr
  (0, _logger.getLogger)().info(`  ${msg}`);
}

function emitWatching() {
  log(`${_logSymbols.default.info} Watching for changes...`);
}

const createWatcher = (initialConfig, onNext) => {
  (0, _debugging.debugLog)(`[Watcher] Starting watcher...`);
  let config = initialConfig;
  const files = [initialConfig.configFilePath].filter(a => a);
  const documents = (0, _pluginHelpers.normalizeInstanceOrArray)(config.documents);
  const schemas = (0, _pluginHelpers.normalizeInstanceOrArray)(config.schema); // Add schemas and documents from "generates"

  Object.keys(config.generates).map(filename => (0, _pluginHelpers.normalizeOutputParam)(config.generates[filename])).forEach(conf => {
    schemas.push(...(0, _pluginHelpers.normalizeInstanceOrArray)(conf.schema));
    documents.push(...(0, _pluginHelpers.normalizeInstanceOrArray)(conf.documents));
  });

  if (documents) {
    documents.forEach(doc => {
      if (typeof doc === 'string') {
        files.push(doc);
      } else {
        files.push(...Object.keys(doc));
      }
    });
  }

  schemas.forEach(schema => {
    if ((0, _isGlob.default)(schema) || (0, _isValidPath.default)(schema)) {
      files.push(schema);
    }
  });

  if (typeof config.watch !== 'boolean') {
    files.push(...(0, _pluginHelpers.normalizeInstanceOrArray)(config.watch));
  }

  let watcher;

  const runWatcher = async () => {
    const chokidar = await Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('chokidar')));
    let isShutdown = false;
    const debouncedExec = (0, _debounce.default)(() => {
      if (!isShutdown) {
        (0, _codegen.executeCodegen)(config).then(onNext, () => Promise.resolve()).then(() => emitWatching());
      }
    }, 100);
    emitWatching();
    const ignored = [];
    Object.keys(config.generates).map(filename => ({
      filename,
      config: (0, _pluginHelpers.normalizeOutputParam)(config.generates[filename])
    })).forEach(entry => {
      if (entry.config.preset) {
        const extension = entry.config.presetConfig && entry.config.presetConfig.extension;

        if (extension) {
          ignored.push((0, _path.join)(entry.filename, '**', '*' + extension));
        }
      } else {
        ignored.push(entry.filename);
      }
    });
    watcher = chokidar.watch(files, {
      persistent: true,
      ignoreInitial: true,
      followSymlinks: true,
      cwd: process.cwd(),
      disableGlobbing: false,
      usePolling: true,
      interval: 100,
      binaryInterval: 300,
      depth: 99,
      awaitWriteFinish: true,
      ignorePermissionErrors: false,
      atomic: true,
      ignored
    });
    (0, _debugging.debugLog)(`[Watcher] Started`);

    const shutdown = async () => {
      isShutdown = true;
      (0, _debugging.debugLog)(`[Watcher] Shutting down`);
      log(`Shutting down watch...`);
      watcher.close();
      (0, _hooks.lifecycleHooks)(config.hooks).beforeDone();
    }; // it doesn't matter what has changed, need to run whole process anyway


    watcher.on('all', async (eventName, path) => {
      (0, _hooks.lifecycleHooks)(config.hooks).onWatchTriggered(eventName, path);
      (0, _debugging.debugLog)(`[Watcher] triggered due to a file ${eventName} event: ${path}`);
      const fullPath = (0, _path.join)(process.cwd(), path);

      if (eventName === 'change' && config.configFilePath && fullPath === config.configFilePath) {
        log(`${_logSymbols.default.info} Config file has changed, reloading...`);
        const configSearchResult = await (0, _config.loadConfig)(config.configFilePath);
        const newParsedConfig = configSearchResult.config;
        newParsedConfig.watch = config.watch;
        newParsedConfig.silent = config.silent;
        newParsedConfig.overwrite = config.overwrite;
        newParsedConfig.configFilePath = config.configFilePath;
        config = newParsedConfig;
      }

      debouncedExec();
    });
    process.once('SIGINT', shutdown);
    process.once('SIGTERM', shutdown);
  }; // the promise never resolves to keep process running


  return new Promise((_, reject) => {
    (0, _codegen.executeCodegen)(config).then(onNext, () => Promise.resolve()).then(runWatcher).catch(err => {
      watcher.close();
      reject(err);
    });
  });
};

exports.createWatcher = createWatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,