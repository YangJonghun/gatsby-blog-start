"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.loadConfig = loadConfig;
exports.createConfig = createConfig;

var _cosmiconfig = _interopRequireDefault(require("cosmiconfig"));

var _path = require("path");

var _core = require("@graphql-codegen/core");

function generateSearchPlaces(moduleName) {
  const extensions = ['json', 'yaml', 'yml', 'js', 'config.js']; // gives codegen.json...

  const regular = extensions.map(ext => `${moduleName}.${ext}`); // gives .codegenrc.json... but no .codegenrc.config.js

  const dot = extensions.filter(ext => ext !== 'config.js').map(ext => `.${moduleName}rc.${ext}`);
  return regular.concat(dot);
}

function customLoader(ext) {
  function loader(filepath, content) {
    if (typeof process !== 'undefined' && 'env' in process) {
      content = content.replace(/\$\{(.*)\}/g, (_str, variable) => {
        let varName = variable;
        let defaultValue = '';

        if (variable.includes(':')) {
          const spl = variable.split(':');
          varName = spl.shift();
          defaultValue = spl.join(':');
        }

        return process.env[varName] || defaultValue;
      });
    }

    if (ext === 'json') {
      return _cosmiconfig.default.loadJson(filepath, content);
    }

    if (ext === 'yaml') {
      return _cosmiconfig.default.loadYaml(filepath, content);
    }

    if (ext === 'js') {
      return _cosmiconfig.default.loadJs(filepath, content);
    }
  }

  return {
    sync: loader,
    async: loader
  };
}

async function loadConfig(configFilePath) {
  const moduleName = 'codegen';
  const cosmi = (0, _cosmiconfig.default)(moduleName, {
    searchPlaces: generateSearchPlaces(moduleName),
    loaders: {
      '.json': customLoader('json'),
      '.yaml': customLoader('yaml'),
      '.yml': customLoader('yaml'),
      '.js': customLoader('js'),
      noExt: customLoader('yaml')
    }
  });
  const result = await (configFilePath ? cosmi.load(configFilePath) : cosmi.search(process.cwd()));

  if (!result) {
    if (configFilePath) {
      throw new _core.DetailedError(`Config ${configFilePath} does not exist`, `
        Config ${configFilePath} does not exist.
  
          $ graphql-codegen --config ${configFilePath}
  
        Please make sure the --config points to a correct file.
      `);
    }

    throw new _core.DetailedError(`Unable to find Codegen config file!`, `
        Please make sure that you have a configuration file under the current directory! 
      `);
  }

  if (result.isEmpty) {
    throw new _core.DetailedError(`Found Codegen config file but it was empty!`, `
        Please make sure that you have a valid configuration file under the current directory!
      `);
  }

  return {
    filepath: result.filepath,
    config: result.config
  };
}

async function createConfig({
  configPath,
  defaultSchema
}) {
  const customConfigPath = configPath ? (0, _path.resolve)(process.cwd(), configPath) : undefined;
  const configSearchResult = await loadConfig(customConfigPath);
  const parsedConfigFile = configSearchResult.config;
  parsedConfigFile.configFilePath = configSearchResult.filepath;
  parsedConfigFile.defaultSchema = defaultSchema;
  return parsedConfigFile;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,