"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.lifecycleHooks = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _child_process = require("child_process");

var _path = require("path");

var _debugging = require("./utils/debugging");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const DEFAULT_HOOKS = {
  afterStart: [],
  beforeDone: [],
  onWatchTriggered: [],
  onError: [],
  afterOneFileWrite: [],
  afterAllFileWrite: [],
  beforeOneFileWrite: [],
  beforeAllFileWrite: []
};

function normalizeHooks(_hooks) {
  const keys = Object.keys(_objectSpread({}, DEFAULT_HOOKS, {}, _hooks || {}));
  return keys.reduce((prev, hookName) => {
    if (typeof _hooks[hookName] === 'string') {
      return _objectSpread({}, prev, {
        [hookName]: [_hooks[hookName]]
      });
    } else if (Array.isArray(_hooks[hookName])) {
      return _objectSpread({}, prev, {
        [hookName]: _hooks[hookName]
      });
    } else {
      return prev;
    }
  }, {});
}

function execShellCommand(cmd) {
  return new Promise((resolve, reject) => {
    (0, _child_process.exec)(cmd, {
      env: _objectSpread({}, process.env, {
        PATH: `${process.env.PATH}${_path.delimiter}${process.cwd()}${_path.sep}node_modules${_path.sep}.bin`
      })
    }, (error, stdout, stderr) => {
      if (error) {
        reject(error);
      } else {
        resolve(stdout ? stdout : stderr);
      }
    });
  });
}

async function executeHooks(hookName, scripts = [], args = []) {
  (0, _debugging.debugLog)(`Running lifecycle hook "${hookName}" scripts...`);

  for (const script of scripts) {
    (0, _debugging.debugLog)(`Running lifecycle hook "${hookName}" script: ${script} with args: ${args.join(' ')}...`);
    await execShellCommand(`${script} ${args.join(' ')}`);
  }
}

const lifecycleHooks = (_hooks = {}) => {
  const hooks = normalizeHooks(_hooks);
  return {
    afterStart: async () => executeHooks('afterStart', hooks.afterStart),
    onWatchTriggered: async (event, path) => executeHooks('onWatchTriggered', hooks.onWatchTriggered, [event, path]),
    onError: async error => executeHooks('onError', hooks.onError, [`"${error}"`]),
    afterOneFileWrite: async path => executeHooks('afterOneFileWrite', hooks.afterOneFileWrite, [path]),
    afterAllFileWrite: async paths => executeHooks('afterAllFileWrite', hooks.afterAllFileWrite, paths),
    beforeOneFileWrite: async path => executeHooks('beforeOneFileWrite', hooks.beforeOneFileWrite, [path]),
    beforeAllFileWrite: async paths => executeHooks('beforeAllFileWrite', hooks.beforeAllFileWrite, paths),
    beforeDone: async () => executeHooks('beforeDone', hooks.beforeDone)
  };
};

exports.lifecycleHooks = lifecycleHooks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,