"use strict";

exports.__esModule = true;
exports.generate = generate;

var _mkdirp = require("mkdirp");

var _path = require("path");

var _crypto = require("crypto");

var _hooks = require("./hooks");

var _codegen = require("./codegen");

var _watcher = require("./utils/watcher");

var _fileSystem = require("./utils/file-system");

var _debugging = require("./utils/debugging");

const hash = content => (0, _crypto.createHash)('sha1').update(content).digest('base64');

async function generate(config, saveToFile = true) {
  await (0, _hooks.lifecycleHooks)(config.hooks).afterStart();
  let recentOutputHash = new Map();

  async function writeOutput(generationResult) {
    if (!saveToFile) {
      return generationResult;
    }

    await (0, _hooks.lifecycleHooks)(config.hooks).beforeAllFileWrite(generationResult.map(r => r.filename));
    await Promise.all(generationResult.map(async result => {
      const exists = (0, _fileSystem.fileExists)(result.filename);

      if (!shouldOverwrite(config, result.filename) && exists) {
        return;
      }

      const content = result.content || '';
      const currentHash = hash(content);
      let previousHash = recentOutputHash.get(result.filename);

      if (!previousHash && exists) {
        previousHash = hash((0, _fileSystem.readSync)(result.filename));
      }

      if (previousHash && currentHash === previousHash) {
        (0, _debugging.debugLog)(`Skipping file (${result.filename}) writing due to indentical hash...`);
        return;
      }

      if (content.length === 0) {
        return;
      }

      recentOutputHash.set(result.filename, currentHash);
      const basedir = (0, _path.dirname)(result.filename);
      await (0, _hooks.lifecycleHooks)(result.hooks).beforeOneFileWrite(result.filename);
      await (0, _hooks.lifecycleHooks)(config.hooks).beforeOneFileWrite(result.filename);
      (0, _mkdirp.sync)(basedir);
      (0, _fileSystem.writeSync)(result.filename, result.content);
      await (0, _hooks.lifecycleHooks)(result.hooks).afterOneFileWrite(result.filename);
      await (0, _hooks.lifecycleHooks)(config.hooks).afterOneFileWrite(result.filename);
    }));
    await (0, _hooks.lifecycleHooks)(config.hooks).afterAllFileWrite(generationResult.map(r => r.filename));
    return generationResult;
  } // watch mode


  if (config.watch) {
    return (0, _watcher.createWatcher)(config, writeOutput);
  }

  const outputFiles = await (0, _codegen.executeCodegen)(config);
  await writeOutput(outputFiles);
  (0, _hooks.lifecycleHooks)(config.hooks).beforeDone();
  return outputFiles;
}

function shouldOverwrite(config, outputPath) {
  const globalValue = config.overwrite === undefined ? true : !!config.overwrite;
  const outputConfig = config.generates[outputPath];

  if (!outputConfig) {
    (0, _debugging.debugLog)(`Couldn't find a config of ${outputPath}`);
    return globalValue;
  }

  if (isConfiguredOutput(outputConfig) && typeof outputConfig.overwrite === 'boolean') {
    return outputConfig.overwrite;
  }

  return globalValue;
}

function isConfiguredOutput(output) {
  return typeof output.plugins !== 'undefined';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,